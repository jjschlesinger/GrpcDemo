// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_demo.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace GrpcDemo {
  public static class DataAccessService
  {
    static readonly string __ServiceName = "GrpcDemo.DataAccessService";

    static readonly Marshaller<global::GrpcDemo.DataRequest> __Marshaller_DataRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.DataRequest.Parser.ParseFrom);
    static readonly Marshaller<global::GrpcDemo.DataResponse> __Marshaller_DataResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.DataResponse.Parser.ParseFrom);
    static readonly Marshaller<global::GrpcDemo.DataReponseRecord> __Marshaller_DataReponseRecord = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.DataReponseRecord.Parser.ParseFrom);
    static readonly Marshaller<global::GrpcDemo.DataRequestRecord> __Marshaller_DataRequestRecord = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.DataRequestRecord.Parser.ParseFrom);

    static readonly Method<global::GrpcDemo.DataRequest, global::GrpcDemo.DataResponse> __Method_GetDataUnary = new Method<global::GrpcDemo.DataRequest, global::GrpcDemo.DataResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetDataUnary",
        __Marshaller_DataRequest,
        __Marshaller_DataResponse);

    static readonly Method<global::GrpcDemo.DataRequest, global::GrpcDemo.DataReponseRecord> __Method_GetDataServerStreaming = new Method<global::GrpcDemo.DataRequest, global::GrpcDemo.DataReponseRecord>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetDataServerStreaming",
        __Marshaller_DataRequest,
        __Marshaller_DataReponseRecord);

    static readonly Method<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataResponse> __Method_GetDataClientStreaming = new Method<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataResponse>(
        MethodType.ClientStreaming,
        __ServiceName,
        "GetDataClientStreaming",
        __Marshaller_DataRequestRecord,
        __Marshaller_DataResponse);

    static readonly Method<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataReponseRecord> __Method_GetDataBidirectionalStreaming = new Method<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataReponseRecord>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "GetDataBidirectionalStreaming",
        __Marshaller_DataRequestRecord,
        __Marshaller_DataReponseRecord);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcDemo.GrpcDemoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataAccessService</summary>
    public abstract class DataAccessServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.DataResponse> GetDataUnary(global::GrpcDemo.DataRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetDataServerStreaming(global::GrpcDemo.DataRequest request, IServerStreamWriter<global::GrpcDemo.DataReponseRecord> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.DataResponse> GetDataClientStreaming(IAsyncStreamReader<global::GrpcDemo.DataRequestRecord> requestStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetDataBidirectionalStreaming(IAsyncStreamReader<global::GrpcDemo.DataRequestRecord> requestStream, IServerStreamWriter<global::GrpcDemo.DataReponseRecord> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataAccessService</summary>
    public class DataAccessServiceClient : ClientBase<DataAccessServiceClient>
    {
      /// <summary>Creates a new client for DataAccessService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataAccessServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataAccessService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataAccessServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataAccessServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataAccessServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GrpcDemo.DataResponse GetDataUnary(global::GrpcDemo.DataRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDataUnary(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDemo.DataResponse GetDataUnary(global::GrpcDemo.DataRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataUnary, null, options, request);
      }
      public virtual AsyncUnaryCall<global::GrpcDemo.DataResponse> GetDataUnaryAsync(global::GrpcDemo.DataRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDataUnaryAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::GrpcDemo.DataResponse> GetDataUnaryAsync(global::GrpcDemo.DataRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataUnary, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::GrpcDemo.DataReponseRecord> GetDataServerStreaming(global::GrpcDemo.DataRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDataServerStreaming(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::GrpcDemo.DataReponseRecord> GetDataServerStreaming(global::GrpcDemo.DataRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetDataServerStreaming, null, options, request);
      }
      public virtual AsyncClientStreamingCall<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataResponse> GetDataClientStreaming(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDataClientStreaming(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncClientStreamingCall<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataResponse> GetDataClientStreaming(CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GetDataClientStreaming, null, options);
      }
      public virtual AsyncDuplexStreamingCall<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataReponseRecord> GetDataBidirectionalStreaming(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDataBidirectionalStreaming(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::GrpcDemo.DataRequestRecord, global::GrpcDemo.DataReponseRecord> GetDataBidirectionalStreaming(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetDataBidirectionalStreaming, null, options);
      }
      protected override DataAccessServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataAccessServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(DataAccessServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDataUnary, serviceImpl.GetDataUnary)
          .AddMethod(__Method_GetDataServerStreaming, serviceImpl.GetDataServerStreaming)
          .AddMethod(__Method_GetDataClientStreaming, serviceImpl.GetDataClientStreaming)
          .AddMethod(__Method_GetDataBidirectionalStreaming, serviceImpl.GetDataBidirectionalStreaming).Build();
    }

  }
}
#endregion
